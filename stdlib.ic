/* Standard library functions */

matrix minor(matrix A, int m, int n) {
    matrix[rows(A) - 1][cols(A) - 1] minor;
    for (int i = 0; i < rows(minor), i++) {
        for (int j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

matrix size(matrix A) {
    return [ rows(A), cols(A) ];
}

float det(matrix A) {
    float det = 0;
    for (int i = 0; i < cols(A); i++) {
        det  = det + (-1) ** i * det(minor(A, 0, i));
    }
    return det;
}

matrix inv(matrix A) {
    float det = det(A);
    matrix[rows(A)][cols(A)] adj;
    for (int i = 0; i < rows(A); i++) {
        for(int j = 0; j < cols(A); j++) {
            adj[i][j] = (-1) ** (i + j) * minor(A, j, i) / det;
        }
    }
    return adj;
}

float tr(matrix A) {
    matrix[cols(A)][rows(A)] transpose;
    for (int i = 0; i < rows(transpose); i++) {
        for (int j = 0; j < cols(transpose); j++) {
            transpose[i][j] = A[j][i];
        }
    }
    return transpose;       
}
