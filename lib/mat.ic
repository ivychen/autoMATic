/* Standard library functions */

// ------ minors ------
int matrix minorimat(int matrix A, int m, int n) {
    int matrix[rows(A) - 1][cols(A) - 1] minor;
    for (int i = 0; i < rows(minor), i++) {
        for (int j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

float matrix minorfmat(float matrix A, int m, int n) {
    float matrix[rows(A) - 1][cols(A) - 1] minor;
    for (int i = 0; i < rows(minor), i++) {
        for (int j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

bool matrix minorbmat(bool matrix A, int m, int n) {
    bool matrix[rows(A) - 1][cols(A) - 1] minor;
    for (int i = 0; i < rows(minor), i++) {
        for (int j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

// ------ size ------
int matrix sizeimat(int matrix A) {
	return [ rows(A), cols(A) ];
}

int matrix sizefmat(float matrix A) [
	return [ rows(A), cols(A) ];
}

int matrix sizebmat(bool matrix A) {
	return [ rows(A), cols(A) ];
}

// ------ determinant ------
float detimat(int matrix A) {
    float det = 0;
    for (int i = 0; i < cols(A); i++) {
        det = det + ((-1) ** i) * det(minorimat(A, 0, i));
    }
    return det;
}

float detfmat(float matrix A) {
    float det = 0;
    for (int i = 0; i < cols(A); i++) {
        det = det + ((-1) ** i) * det(minorfmat(A, 0, i));
    }
    return det;
}

float detbmat(bool matrix A) {
    float det = 0;
    for (int i = 0; i < cols(A); i++) {
        det = det + ((-1) ** i) * det(minorbmat(A, 0, i));
    }
    return det;
}

// ------ inverse ------
float matrix invimat(int matrix A) {
    float det = det(A);
    float matrix[rows(A)][cols(A)] adj;
    for (int i = 0; i < rows(A); i++) {
        for(int j = 0; j < cols(A); j++) {
            adj[i][j] = ((-1) ** (i + j)) * minorimat(A, j, i) * (1.0 / det);
        }
    }
    return adj;
}

float matrix invfmat(float matrix A) {
    float det = det(A);
    float matrix[rows(A)][cols(A)] adj;
    for (int i = 0; i < rows(A); i++) {
        for(int j = 0; j < cols(A); j++) {
            adj[i][j] = ((-1) ** (i + j)) * minorfmat(A, j, i) * (1.0 / det);
        }
    }
    return adj;
}

float matrix invbmat(bool matrix A) {
    float det = det(A);
    float matrix[rows(A)][cols(A)] adj;
    for (int i = 0; i < rows(A); i++) {
        for(int j = 0; j < cols(A); j++) {
            adj[i][j] = ((-1) ** (i + j)) * minorbmat(A, j, i) * (1.0 / det);
        }
    }
    return adj;
}

// ------ trace ------
/* TODO */
