/* autoMATic Compiler - Spring 2018 - COMS4115 PLT
 by Ivy Chen ic2389, Nguyen Chi Dung ncd2118,
 Nelson Gomez ng2573, Jimmy O'Donnell jo2474 */

/* Standard library functions */

// ------ minors ------
int matrix minorimat(int matrix A, int m, int n) {
    int matrix minor = zeroes(rows(A) - 1, cols(A) - 1);
    int i, j;
    for (i = 0; i < rows(minor), i++) {
        for (j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

float matrix minorfmat(float matrix A, int m, int n) {
    float matrix minor = zeroes(rows(A) - 1, cols(A) - 1);
    int i, j;
    for (i = 0; i < rows(minor), i++) {
        for (j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

bool matrix minorbmat(bool matrix A, int m, int n) {
    bool matrix minor = zeroes(rows(A) - 1, cols(A) - 1);
    int i, j;
    for (i = 0; i < rows(minor), i++) {
        for (j = 0; j < cols(minor); j++) {
            if (i < m && j < n) {
                minor[i][j] = A[i][j];
            } else if (i < m && j >=n) {
                minor[i][j] = A[i][j + 1];
            } else if (i >=m && j < n) {
                minor[i][j] = A[i + 1][j];
            } else {
                minor[i][j] = A[i + 1][j + 1];
            }
        }
    }
    return minor;
}

// ------ size ------
int matrix sizeimat(int matrix A) {
	return [ rows(A), cols(A) ];
}

int matrix sizefmat(float matrix A) [
	return [ rows(A), cols(A) ];
}

int matrix sizebmat(bool matrix A) {
	return [ rows(A), cols(A) ];
}

// ------ determinant ------
float detimat(int matrix A) {
    float det = 0;
    int i;
    for (i = 0; i < cols(A); i++) {
        det = det + ((-1) ** i) * det(minorimat(A, 0, i));
    }
    return det;
}

float detfmat(float matrix A) {
    float det = 0;
    int i;
    for (i = 0; i < cols(A); i++) {
        det = det + ((-1) ** i) * det(minorfmat(A, 0, i));
    }
    return det;
}

float detbmat(bool matrix A) {
    float det = 0;
    int i;
    for (i = 0; i < cols(A); i++) {
        det = det + ((-1) ** i) * det(minorbmat(A, 0, i));
    }
    return det;
}

// ------ inverse ------
float matrix invimat(int matrix A) {
    float det = det(A);
    float matrix adj = zeroes(rows(A), cols(A));
    int i, j;
    for (i = 0; i < rows(A); i++) {
        for(j = 0; j < cols(A); j++) {
            adj[i][j] = ((-1) ** (i + j)) * minorimat(A, j, i) * (1.0 / det);
        }
    }
    return adj;
}

float matrix invfmat(float matrix A) {
    float det = det(A);
    float matrix adj = zeroes(rows(A), cols(A));
    int i, j;
    for (int i = 0; i < rows(A); i++) {
        for(int j = 0; j < cols(A); j++) {
            adj[i][j] = ((-1) ** (i + j)) * minorfmat(A, j, i) * (1.0 / det);
        }
    }
    return adj;
}

float matrix invbmat(bool matrix A) {
    float det = det(A);
    float matrix adj = zeroes(rows(A), cols(A));
    int i, j;
    for (int i = 0; i < rows(A); i++) {
        for(int j = 0; j < cols(A); j++) {
            adj[i][j] = ((-1) ** (i + j)) * minorbmat(A, j, i) * (1.0 / det);
        }
    }
    return adj;
}

// ------ trace ------
/* TODO */
